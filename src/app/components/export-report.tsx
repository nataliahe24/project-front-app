import { useState } from "react";
import { useProject } from "../context/use.context";
import { aiService } from "../core/ai.service";

/**
 * Export AI-generated reports
 * @molecule
 */
export const ExportReport = () => {
  const { projects } = useProject();
  const [exporting, setExporting] = useState(false);

  const generateReport = async () => {
    setExporting(true);
    try {
      const insights = await aiService.generateInsights(projects);
      
      const now = new Date();
      const report = `
╔════════════════════════════════════════════════════════════╗
║                  PROJECT MANAGEMENT REPORT                 ║
║                   Generated by AI Assistant                ║
╚════════════════════════════════════════════════════════════╝

📅 Generated: ${now.toLocaleString()}
🤖 Analysis Engine: Google Gemini AI

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 SUMMARY STATISTICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Total Projects: ${projects.length}
In Progress: ${projects.filter(p => p.status === "in progress").length}
Completed: ${projects.filter(p => p.status === "completed").length}
Completion Rate: ${((projects.filter(p => p.status === "completed").length / projects.length) * 100).toFixed(1)}%

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🤖 AI INSIGHTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${insights.message}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 RECOMMENDATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${insights.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n\n')}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 PROJECT DETAILS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${projects.map((p, i) => `
${i + 1}. ${p.name.toUpperCase()}
   Status: ${p.status.toUpperCase()}
   Start: ${new Date(p.startDate).toLocaleDateString()}
   End: ${p.endDate ? new Date(p.endDate).toLocaleDateString() : 'Not set'}
   Description: ${p.description || 'N/A'}
   Created: ${new Date(p.createdAt).toLocaleDateString()}
`).join('\n')}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

End of Report
      `;
      const blob = new Blob([report], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `project-report-${now.toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error generating report:", error);
      alert("Failed to generate report. Please try again.");
    } finally {
      setExporting(false);
    }
  };

  if (projects.length === 0) {
    return null;
  }

  return (
    <button
      onClick={generateReport}
      disabled={exporting}
      className="flex items-center gap-2 px-4 py-2 bg-purple-600 
        text-white rounded-lg hover:bg-purple-700 
        disabled:bg-gray-400 disabled:cursor-not-allowed 
        transition-colors shadow-sm hover:shadow-md"
    >
      <span className="text-xl">📄</span>
      <span className="font-medium">
        {exporting ? "Generating..." : "Export AI Report"}
      </span>
    </button>
  );
};

